
@body-background-color: #8cf;

@task-color-white: #fff;
@task-color-black: #333;
@task-color-blue: #38f;
@task-color-purple: #a29;
@task-color-red: #f45;
@task-color-orange: #f82;
@task-color-yellow: #ff5;
@task-color-green: #6f2;





// Mixins

.return-contrasting-color(@color) when (luma(@color) > 50%) {
	@contrasting-color: black;
}
.return-contrasting-color(@color) when (luma(@color) =< 50%) {
	@contrasting-color: white;
}

.contrasting-color(@color) {

	.return-contrasting-color(@color);

	color: @contrasting-color;
}






body {

	background: @body-background-color; // url('noise-3percent.png');

	// background: #8cf;
	// background-image: linear-gradient(to bottom, #48e 0%, #8cf 100%);
}




#main {

	input.title {

		font-size: 30px;
		font-weight: normal;
		font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;

		background: transparent;
		color: inherit;

		border-radius: 3px;
		border: 1px solid transparent;

		padding: 8px;

		&:focus {

			// Disable the default focus-style.
			outline: none;

			border-color: inherit;
		}
	}
}



.tree-view {

	@task-width: 200px;
	@task-margin: 16px;
	@task-radius: 5px;

	margin: 50px;

	ul {

		margin: 0;
		padding: 0;
		list-style: none;

		li {

			min-height: 30px;

			margin: 0;
			padding: 0;

			display: flex;
			align-items: stretch;

			&.insert.after {

				margin-bottom: 10px;
			}

			>div.task {

				display: inline-block;

				width: @task-width;

				// box-sizing: border-box;
				// padding: 10px;
				
				margin: 0 @task-margin @task-margin 0;
				border-radius: @task-radius;

				@title-margin-h: 14px;
				@title-margin-v: 10px;

				h1, input {

					font-size: 20px;
					font-weight: normal;

					font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;

					padding: @title-margin-h/2 - 1px @title-margin-v/2 - 1px;
					margin: @title-margin-h/2 @title-margin-v/2;
				}

				h1 {

					border: 1px solid transparent;
				}

				div.description {

					font-size: 14px;
					font-weight: normal;
					font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;

					margin: @title-margin-h @title-margin-v;
					margin-top: 0;
				}

				input {

					display: none;

					width: calc(~"100% -" @title-margin-v);

					background: transparent;
					color: inherit;

					border-radius: 3px;
					border: 1px solid;

					// Disable the default focus-style.
					&:focus {

						outline: none;
					}
				}

				&.editing-title h1 {

					display: none;
				}
				&.editing-title input {

					display: block;
				}

				// Buttons
				i.button {

					position: absolute;
					bottom: 7px;

					font-size: 22px;

					opacity: 0;
					transition: opacity 0.1s;
				}
				&:hover i.button {

					opacity: 1;
					transition: opacity 0.2s;
				}
				&.editing-title i.button {

					display: none;
				}
				i.add-sub-task {

					right: 10px;
				}
				i.task-details {

					right: 35px;
				}


				// Colors
				.task-color (@color) {

					.return-contrasting-color(@color);

					background: @color; // url(noise-5percent.png);
					color: @contrasting-color;
					// background-image: linear-gradient(to bottom, @color 0%, darken(@color, 2%) 100%);
					box-shadow: 0px 2px 0px 0px darken(desaturate(@color, 30%), 10%);

					// Make the description text less prominent, except for links.
					div.description {

						color: fade(@contrasting-color, 75%);

						a {
							color: @contrasting-color;
							text-decoration: none;
						}
					}

					// Make the buttons visually stay on top of the title.
					i.button {

						background: @color;
						box-shadow: 0px 0px 5px 5px @color;
					}
				}
				// Use a default color, or they will fade in from transparent when they are created. :-/.
				.task-color(@task-color-white);
				&[data-color='black'] {
					.task-color(@task-color-black);
				}
				&[data-color='blue'] {
					.task-color(@task-color-blue);
				}
				&[data-color='purple'] {
					.task-color(@task-color-purple);
				}
				&[data-color='red'] {
					.task-color(@task-color-red);
				}
				&[data-color='orange'] {
					.task-color(@task-color-orange);
				}
				&[data-color='yellow'] {
					.task-color(@task-color-yellow);
				}
				&[data-color='green'] {
					.task-color(@task-color-green);
				}
				@fade-time: .3s;
				transition: color @fade-time, background-color @fade-time, box-shadow @fade-time;


				// Drop targets
				position: relative;
				>.drop-target {

					position: absolute;

					width: @task-width;

					&.before {

						top: -@task-margin/2;
						bottom: 50%;
					}
					&.after {

						top: 50%;
						bottom: -@task-margin/2;
					}
					&.child {

						// Set it up to cover the entire area where a child
						// would go, but show it only for leaf nodes.

						display: none;

						width: (@task-margin + @task-width);
						right: -(@task-margin + @task-width);

						top: -@task-margin/2;
						bottom: -@task-margin/2;

						// Make hovering not show the task buttons.
						pointer-events: none;
					}
				}
			}

			&.leaf > .task > .drop-target.child {

				display: block;
			}
		}
	}

	// Make the drop targets only show up while dragging.
	// (Leaf nodes child-targets are still visible, but they don't overlap the task.)
	.drop-target {

		display: none;
	}
	&.dragging .drop-target {

		display: block;
	}

	button.add-sub-task {

		opacity: .75;
		display: block;
		height: 52px;
		width: @task-width;

		font-size: 20px;
		font-weight: normal;
		font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;

		@letterpress-ammount: 10%;

		& when (luma(@body-background-color) > 50%) {

			text-shadow: 0 -1px 0 darken(@body-background-color, @letterpress-ammount);
		}
		& when (luma(@body-background-color) <= 50%) {

			text-shadow: 0 1px 0 lighten(@body-background-color, @letterpress-ammount);
		}
		.contrasting-color(#fff - @body-background-color);
		background: transparent;
		border-radius: @task-radius;
		border: 2px dotted;
	}
}



// Modal
body {

	#modal-overlay {

		display: none;

		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;

		background:rgba(255, 255, 255, .5) url('noise-3percent.png');


		// Flexbox stuff to center `.dialog`.
		align-items: center;
		justify-content: center;

		.dialog {

			margin: 0 auto;

			background: white;

			padding: 30px;
			border-radius: 10px;
			box-shadow: 0px 2px 20px 0px rgba(0, 0, 0, .2);
		}
	}

	&.modal-overlay {

		#page {

			// Just eyekandy. IE support doesn't matter.
			-webkit-filter: blur(5px);
			        filter: blur(5px);
		}

		#modal-overlay {

			display: flex;
		}
	}
}



.dialog.edit-task {

	width: 400px;

	input.title {

		font-size: 20px;
		width: 100%;
	}

	.estimates {

		margin: 20px 0 0 0;

		display: flex;
		align-items: center;
		flex-direction: column;

		label {

			width: 280px;
			text-align: right;

			font-size: 14px;
			font-weight: normal;
			font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;

			input {

				width: 130px;
				margin-left: 20px;
			}
		}
	}

	textarea {

		margin: 20px 0;

		font-size: 14px;

		width: 100%;
		height: 100px;
		resize: none;

		&:focus {

			resize: vertical;
		}
	}

	input.title, .estimates input, textarea {

		font-weight: normal;
		font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;

		background: transparent;
		color: inherit;

		border-radius: 3px;
		border: 1px solid transparent;

		&:focus {

			// Disable the default focus-style.
			outline: none;

			border-color: inherit;
		}
	}

	.estimates input, textarea {

		font-size: 14px;
	}

	.colors {

		margin: 20px 0;

		display: flex;
		justify-content: center;

		label {

			@size: 16px;
			@selected-size: 24px;

			// Make it large.
			width: @selected-size;
			height: @selected-size;

			margin: 0;

			input {

				// Hide the default widget.
				// Opacity makes it tabbable & arrowable.
				opacity: 0;
				width: 0;
				height: 0;
				margin: 0;
			}

			// Colors
			.task-color (@color) {

				span {

					content: '';
					display: block;
					background: @color;

					width: @size;
					height: @size;
					border-radius: @size/2;
					margin: (@selected-size - @size)/2;

					transition: transform .2s;

					// Add extra contrast around bleak colors.
					& when (luma(@color) > 50%) {

						box-shadow: inset 0px 0px 2px 0px darken(desaturate(@color, 20%), 20%);
					}
				}

				// The sibling selector lets me apply a :checked style to a
				// completely separate element where I control the content.
				// Much more flexible than input::before.
				// Thanks, Heydon! http://www.sitepoint.com/replacing-radio-buttons-without-replacing-radio-buttons/
				span:hover {

					transform: scale(unit((@selected-size+@size)/2/@size));
					transition: transform .1s;
				}
				input:checked + span {

					transform: scale(unit(@selected-size/@size));
				}
			}
			&.white {
				.task-color(@task-color-white);
			}
			&.black {
				.task-color(@task-color-black);
			}
			&.blue {
				.task-color(@task-color-blue);
			}
			&.purple {
				.task-color(@task-color-purple);
			}
			&.red {
				.task-color(@task-color-red);
			}
			&.orange {
				.task-color(@task-color-orange);
			}
			&.yellow {
				.task-color(@task-color-yellow);
			}
			&.green {
				.task-color(@task-color-green);
			}
		}
	}

	button.delete {

		margin: 0 auto;
		display: block;

		font-size: 20px;
		font-weight: normal;
		font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;

		@button-color-red: #f31;
		@bulge: 6%;
		@letterpress-ammount: 10%;

		& when (luma(@button-color-red) > 50%) {

			text-shadow: 0 1px 0 lighten(@button-color-red, @letterpress-ammount);
		}
		& when (luma(@button-color-red) <= 50%) {

			text-shadow: 0 -1px 0 darken(@button-color-red, @letterpress-ammount);
		}
		.contrasting-color(@button-color-red);
		background: @button-color-red linear-gradient(to top, darken(@button-color-red, @bulge), @button-color-red, lighten(@button-color-red, @bulge));
		border-radius: 5px;
		padding: 6px 20px;
		border: none;

		&:active {

			background: @button-color-red;
		}

		&:focus {

			outline: none;
		}
	}

	position: relative;
	i.close {

		position: absolute;
		right: 10px;
		top: 10px;
		font-size: 22px;

		color: #ccc;
		transition: color 0.1s;
		&:hover {

			color: #aaa;
			transition: color 0.2s;
		}
	}
}
